## COMANDOS GIT (REPOSITÓRIO LOCAL)

**LISTAR DIRETÓRIOS**

Windows: Diretórios (abrir prompt de comando) -> DIGITAR: dir

Macbook/Linux: DIGITAR: ls

——————————————————

**NAVEGAR POR DIRETÓRIOS**

COMANDO WINDOWS: cd Windows

COMANDO MACBOOK: cd etc

______________________________

**VOLTAR UM NIVEL DE NAVEGAÇÃO**

cd ..

______________________________

**LIMPAR O TERMINAL**

WINDOWS: cls

MACBOOK: clear (CTRL + L)

______________________________

**CRIAR UMA PASTA PELO TERMINAL**
Workspace é o nome da pasta criada

WINDOWS: mkdir workspace

MACBOOK: mkdir workspace

_____________________________

**CRIANDO UM ARQUIVO DENTRO DA PASTA/REPOSITÓRIO**
Comandos iguais para WINDOWS e MACBOOK

cd workspace

echo hello > hello.txt

________________________________

**DELETAR ARQUIVOS**

WINDOWS: del workspace (não vai deletar a pasta e sim todos os arquivos dentro dela, como o hello.txt)

________________________________

**DELETAR REPOSITÓRIOS**

WINDOWS: rmdir workspace /S /Q

MACBOOK: rm -rf workspace/

_______________________________

**GERAR SHA1 WINDOWS**
(PASTA TEXTO.TXT CRIADA NO DESKTOP)

openssl sha1 texto.txt

RESPOSTA DO TERMINAL: SHA1(texto.txt) = algoritmo de 40 caracteres

***O arquivo foi alterado e uma nova chave é gerada a partir do momento que o comando é executado novamente.***

***Se a primeira alteração for reestabelecida e o comando for executado novamente, a primeira chave é novamente informada.***

ESSE COMANDO É IMPORTANTE PARA VERIFICAR SE O ARQUIVO INFORMADA HOUVE ALTERAÇÕES REALIZADAS.

_________________________________

**OBJETOS GIT**

- BLOBS
- TREES
- COMMITS

BLOB:

BLOB                               Tamanho 42
\0
Ola Mundo

echo ‘conteudo’ | git hash-object —stdin
> chave de 40 caracteres

echo -e ‘blob 9\0conteudo’ | openss1 sha1

> chave de 40 caracteres (igual)

TREE:

TREE 					<tamanho>

\0 (METADADOS)

blob		sa4d8s		texto.txt


COMMIT:

COMMIT					<tamanho>

tree			s4a5sq1
parente		a98acq1
autor		perles
mensagem	“inicia …”

timestamp

____________________________________

***CHAVE SSH E TOKEN*** (PARA CLONAR REPOSITÓRIOS)

WINDOWS: 

> Abrir GITBASH (windows)

$ ssh-keygen -t ed25519 -C meiguz@outlook.com

***VISUALIZAR AS CHAVES CRIADAS***

cd /c/Users/Gustavo/.ssh

ls

RESPOSTA: id_ed25519	id_ed25519.pub

***VISUALIZAR O CONTEÚDO DA CHAVE***

cat id_ed25519.pub

RESPOSTA: chave (copiar e colar em configurações no GitHub para inserir a chave de vínculo com a máquina)

_________________________________
**GERAR NOVA CHAVE SSH E ADICIONÁ-LA AO SSH-AGENT**

eval $(ssh-agent -s)
Agent pid 1382

ssh-add id_ed25519

_________________________________

**TOKEN**

O token serve para o HTPPS

git clone link repositório

************************************************************************************************************************************************************************************************************************
************************************************************************************************************************************************************************************************************************
************************************************************************************************************************************************************************************************************************

## 2.0 - COMANDOS GIT (REPOSITÓRIO LOCAL)

cd livro-receitas/
git init

____________________________________

**VISUALIZAR ELEMENTOS OCULTOS DE UMA PASTA**

ls -a

___________________________________
**ANTES DE CRIAR O COMMIT** 

git config —global user.email “meiguz@outlook.com”

git config —global user.name Gustavo

___________________________________

**CRIAR UM ARQUIVO NO REPOSITÓRIO**

stronogoff.md

# STROGONOFF DE FRANGO (h1)
## Receita (h2)

_________________________________

git add *

git commit -m “commit inicial”

_________________________________
**COMANDO PARA SABER SE HÁ ELEMENTOS COMMITADOS**

git status

________________________________

**MOVER ELEMENTOS PARA DENTRO DE UMA PASTA**

mkdir receitas

> mv strogonoff.md ./receitas/

> git add strogonoff.md receitas/

*MODIFICADO PARA STAGED E PRONTO PARA SER COMMITADO*

git commit -m “cria pasta receitas, move arquivo para receitas”

__________________________________

ls
receitas/

echo > README.md

************************************************************************************************************************************************************************************************************************
************************************************************************************************************************************************************************************************************************
************************************************************************************************************************************************************************************************************************

## COMANDOS GITHUB (REPOSITÓRIO REMOTO)

APONTAR O REPOSITÓRIO LOCAL (arquivos criados na sua máquina - terminal) PARA O REPOSITÓRIO REMOTO (git hub)

git remote add origin link do repositório

git remote -v (checar a lista)

git push origin master 


___________________________________

**RESOLVENDO CONFLITOS**

CONFLITO DE MERGE 

(PUXAR REPOSITÓRIO REMOTO PARA O REPOSITÓRIO LOCAL)

Git pull origin master

**VAI DAR ERRO**

Edita o arquivo conforme as modificações e comida

git add *

git commit -m “resolve conflitos”

git push origin master

___________________________________

**CLONAR REPOSITÓRIO**

Git clone link do repositório GitHub





















	


